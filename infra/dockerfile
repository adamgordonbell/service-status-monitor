# Use a Python image with uv pre-installed
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim

# Set the working directory
WORKDIR /app

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Install libpcap for scapy
RUN apt-get update && apt-get install -y libpcap-dev && rm -rf /var/lib/apt/lists/*

# First, install only dependencies (no dev, no install project) for caching
# `--frozen` ensures it uses lockfile exactly, `--no-install-project` ensures it doesn't install the current project yet
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev

# Now add the rest of your source code
COPY . /app

# Create templates directory
RUN mkdir -p /app/templates

# Create virtual environment and install the project
RUN uv venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install -e .

# Expose the Flask port
EXPOSE 3000

# Set environment variables
ENV FLASK_APP=scripts/app_server.py
ENV FLASK_ENV=production
ENV FLASK_RUN_PORT=3000

# Run the application with --no-sniff flag since we're in a container
CMD ["python", "scripts/app_server.py", "--no-sniff"]
